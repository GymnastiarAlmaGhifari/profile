/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/* eslint-disable no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 laptop.gltf --transform
Author: Blue Lantern (https://sketchfab.com/genoris2)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/gaming-laptop-4e72a2078b3c4a75a821ab09830693fe
Title: Gaming Laptop
*/

import React, { Suspense, useEffect, useRef, useState } from "react";
import { MeshBasicMaterial, TextureLoader } from "three";

import CanvasLoader from "../common/Loader";
import { Canvas, useLoader } from "@react-three/fiber";
import { OrbitControls, Preload, useGLTF } from "@react-three/drei";

const Laptop = ({ isMobile }) => {
  const { nodes, materials } = useGLTF("/laptop-transformed.glb");

  const windowTexture = useLoader(TextureLoader, "/window-laptop.png");
  const windowMaterial = new MeshBasicMaterial({ map: windowTexture });

  windowMaterial.opacity = 0.7;
  windowMaterial.transparent = true;

  const scale = isMobile ? 1.7 : 1.85;
  const position = isMobile ? [-0.199, -1.596, 0] : [-0.199, -1.65, 0];

  return (
    <group scale={scale} position={position} dispose={null}>
      {/* pointLight */}
      <pointLight intensity={1.3} angle={0.2} penumbra={1} position={[0, 2.9, -1]} />
      {/* HemisphereLight */}
      <hemisphereLight intensity={3} groundColor="#f3f3f3" />

      {/* <spotLight intensity={2} position={[-1.329, -1.22, -3.66]} />
      <spotLight intensity={2} position={[-1.329, -1.22, 3.66]} /> */}

      <spotLight target={nodes.Object_4} angle={Math.PI / 3} intensity={2} position={[0.29, 1.45, 0.019]} />
      <directionalLight target={nodes.Object_4} angle={Math.PI / 3} intensity={2} position={[0.29, 1.45, 0.019]} />
      <directionalLight position={[-5.921, -1.112, -0.133]} target={nodes.Object_4} angle={Math.PI / 4} intensity={1.2} />

      <mesh geometry={nodes.Object_4.geometry} material={materials.PaletteMaterial001} position={[-1.199, 0.096, 0]} rotation={[0, 0, -1.38]} />
      <mesh geometry={nodes.Object_7.geometry} material={windowMaterial} position={[-1.199, 0.096, 0]} rotation={[0, 0, -1.38]} />
      <mesh geometry={nodes.Object_10.geometry} material={materials.PaletteMaterial002} position={[-1.199, 0.096, 0]} rotation={[0, 0, -1.38]} />
      <mesh geometry={nodes.Object_14.geometry} material={materials["Material.009"]} />
      <mesh geometry={nodes.Object_16.geometry} material={materials["Material.010"]} />
      {/* berikan pencahayaan */}
    </group>
  );
};

const LaptopCanvas = () => {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // Add a listener for changes to the screen size
    const mediaQuery = window.matchMedia("(max-width: 500px)");

    // Set the initial value of the `isMobile` state variable
    setIsMobile(mediaQuery.matches);

    // Define a callback function to handle changes to the media query
    const handleMediaQueryChange = (event) => {
      setIsMobile(event.matches);
    };

    // Add the callback function as a listener for changes to the media query
    mediaQuery.addEventListener("change", handleMediaQueryChange);

    // Remove the listener when the component is unmounted
    return () => {
      mediaQuery.removeEventListener("change", handleMediaQueryChange);
    };
  }, []);

  return (
    <Canvas
      frameloop="demand"
      shadows
      dpr={[1, 2]}
      camera={{ position: [20, 0, -5], fov: 25 }}
      gl={{ preserveDrawingBuffer: true }}
      style={{
        cursor: "grab",
      }}
      // make canvas canot slide with mouse right
      onContextMenu={(e) => e.preventDefault()}
    >
      <ambientLight intensity={5} />

      <Suspense fallback={<CanvasLoader />}>
        <OrbitControls
          enableZoom={false}
          maxPolarAngle={Math.PI / 2.7}
          minPolarAngle={Math.PI / 2.7}
          // autoRotate //auto rotate
          // autoRotateSpeed={0.6} //speed
        />
        <Laptop isMobile={isMobile} />
      </Suspense>
      <Preload all />
    </Canvas>
  );
};

export default LaptopCanvas;

useGLTF.preload("/laptop-transformed.glb");
useLoader.preload(TextureLoader, "/window-laptop.png");
