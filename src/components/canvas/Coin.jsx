/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/* eslint-disable no-unused-vars */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 coin.gltf --transform
Author: alex.yefremov (https://sketchfab.com/alex.yefremov)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ethereum-coin-b4399435f5a549c0a1fa8839fc6f636b
Title: ethereum coin
*/

import React, { Suspense, useEffect, useRef, useState } from "react";
import { MeshBasicMaterial, MeshStandardMaterial, TextureLoader } from "three";

import CanvasLoader from "../common/Loader";
import { Canvas, useLoader } from "@react-three/fiber";
import { OrbitControls, Preload, Stage, Text, useGLTF, useTexture } from "@react-three/drei";

const Coin = (props) => {
  const { nodes, materials } = useGLTF("/coin-transformed.glb");

  const [icon] = useTexture([props.icon]);

  // const goldMaterial = new MeshStandardMaterial({
  //   color: "#ffd700", // Gold color
  //   roughness: 0.4, // Adjust the material properties as needed
  //   metalness: 1.0,
  // });
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.polySurface3_lambert16_0.geometry} material={materials.lambert16} position={[0, 0, -0.009]} rotation={[-Math.PI / 2, 0, 0]} scale={0} />
      <mesh geometry={nodes.pCylinder1_lambert1_0.geometry} material={materials.lambert1} rotation={[-Math.PI / 2, 0, 0]} scale={[0.15, 0.009, 0.15]} />

      <mesh position={[0, 0, 0.01]} rotation={[0, 0, 0]} scale={[0.1, 0.1, 1]}>
        <circleGeometry args={[1, 32]} /> {/* 32 segments for a smooth circle */}
        <meshBasicMaterial map={icon} /> {/* Set the color of the circle */}
      </mesh>

      <mesh position={[0, 0.05, -0.01]} rotation={[0, Math.PI, 0]} scale={[0.071, 0.071, 1]}>
        <circleGeometry args={[1, 32]} /> {/* 32 segments for a smooth circle */}
        <meshBasicMaterial map={icon} /> {/* Set the color of the circle */}
      </mesh>
      {/* <mesh position={[0, -0.128, 0.01]} rotation={[0, 0, 0]} scale={[0.1, 0.1, 1]}>
        <Text fontSize={0.5} color="#FF0000">
          Next js
        </Text>
      </mesh> */}

      {/* buatkan lagi seperti diatas dengan hadapan yang beda */}

      <mesh position={[0, -0.068, -0.01]} rotation={[0, Math.PI, 0]} scale={[0.1, 0.1, 1]}>
        <Text fontSize={0.5} color="#FFFFFF">
          {props.title}
        </Text>
      </mesh>
    </group>
  );
};

const CoinCanvas = ({ icon, title }) => {
  return (
    <Canvas frameloop="demand" dpr={[1, 2]} gl={{ preserveDrawingBuffer: true }}>
      <Stage environment="city" intensity={0.6}>
        <Suspense fallback={<CanvasLoader />}>
          <OrbitControls enableZoom={false} autoRotate autoRotateSpeed={0.7} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />
          <Coin icon={icon} title={title} />
        </Suspense>
      </Stage>
      <Preload all />
    </Canvas>
  );
};

export default CoinCanvas;

useGLTF.preload("/coin-transformed.glb");
